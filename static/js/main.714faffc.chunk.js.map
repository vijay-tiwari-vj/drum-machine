{"version":3,"sources":["contexts/SoundContext.js","components/Box.js","components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["SoundContext","createContext","SoundContextProvider","props","data","keyTrigger","mp3","Provider","value","children","Box","playSound","audio","current","currentTime","play","setTimeout","id","parentNode","querySelector","innerText","createRef","this","text","document","addEventListener","e","key","toUpperCase","getElementById","parent","classList","add","remove","className","onClick","ref","src","Component","DrumPad","beats","context","map","beat","idx","contextType","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAEaA,EAAeC,0BA4CbC,EA1CqB,SAACC,GACnC,IA8BMC,EAAO,CAAC,GAAD,OA9BC,CAAC,CACbC,WAAY,IACZC,IAAK,4DACJ,CACDD,WAAY,IACZC,IAAK,4DACJ,CACDD,WAAY,IACZC,IAAK,4DACJ,CACDD,WAAY,IACZC,IAAK,8DACJ,CACDD,WAAY,IACZC,IAAK,4DACJ,CACDD,WAAY,IACZC,IAAK,0DACJ,CACDD,WAAY,IACZC,IAAK,8DACJ,CACDD,WAAY,IACZC,IAAK,8DACJ,CACDD,WAAY,IACZC,IAAK,6DAQP,OACE,kBAACN,EAAaO,SAAd,CAAuBC,MAAOJ,GAC1BD,EAAMM,WCUCC,EAjDf,kDACE,aAAe,IAAD,8BACZ,gBAIFC,UAAY,WACV,EAAKC,MAAMC,QAAQC,YAAc,EACjC,EAAKF,MAAMC,QAAQE,OACnBC,WAAW,KAEX,IAAMC,EAAK,EAAKL,MAAMC,QAAQI,GAEf,EAAKL,MAAMC,QAAQK,WACXA,WACfC,cAAc,MAAMC,UAAYH,GAZxC,EAAKL,MAAQS,sBAFD,EADhB,qDAkBY,IAAD,EACiBC,KAAKnB,MAArBoB,EADD,EACCA,KAAMX,EADP,EACOA,MAqBd,OAnBAY,SAASC,iBAAiB,WAAW,SAACC,GACpC,IAAMT,EAAKS,EAAEC,IAAIC,cACXhB,EAAQY,SAASK,eAAeZ,GACtC,GAAIL,EAAO,CACT,IAAMkB,EAASlB,EAAMM,WACrBY,EAAOC,UAAUC,IAAI,UAErBpB,EAAME,YAAc,EACpBF,EAAMG,OAENH,EAAMa,iBAAiB,SAAS,WAC9BK,EAAOC,UAAUE,OAAO,aAGVH,EAAOZ,WACfC,cAAc,MAAMC,UAAYH,MAK1C,yBAAKA,GAAE,eAAUM,GAAQW,UAAU,WAAWC,QAASb,KAAKX,WAC1D,2BAAOyB,IAAKd,KAAKV,MAAOK,GAAIM,EAAMc,IAAKzB,EAAOsB,UAAU,SACtDX,OA3CV,GAAyBe,aCGnBC,E,uKAGM,IACDC,EADA,YACSlB,KAAKmB,QADd,MAGP,OACE,yBAAKxB,GAAG,eAAeiB,UAAU,kBAC/B,yBAAKjB,GAAG,UAAUiB,UAAU,WAAU,qCACrCM,EAAME,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,EAAD,CACErB,KAAMoB,EAAKtC,WACXsB,IAAKiB,EACLhC,MAAO+B,EAAKrC,c,GAbFgC,aAAhBC,EACGM,YAAc7C,EAoBRuC,QCZAO,MAVf,WACE,OACE,yBAAKZ,UAAU,aACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCIYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASK,eAAe,SDyHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.714faffc.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\n\r\nexport const SoundContext = createContext();\r\n\r\nexport const SoundContextProvider = (props) => {\r\n  const beats = [{\r\n    keyTrigger: 'Q',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  }, {\r\n    keyTrigger: 'W',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyTrigger: 'E',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n  }, {\r\n    keyTrigger: 'A',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyTrigger: 'S',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n  }, {\r\n    keyTrigger: 'D',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyTrigger: 'Z',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }, {\r\n    keyTrigger: 'X',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n  }, {\r\n    keyTrigger: 'C',\r\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n  }\r\n  ];\r\n\r\n  const data = [\r\n    [...beats]\r\n  ]\r\n\r\n  return (\r\n    <SoundContext.Provider value={data}>\r\n      { props.children}\r\n    </SoundContext.Provider>\r\n  )\r\n}\r\n\r\nexport default SoundContextProvider;\r\n","import React, { Component, createRef } from 'react';\r\n\r\nexport class Box extends Component {\r\n  constructor() {\r\n    super();\r\n    this.audio = createRef();\r\n  }\r\n\r\n  playSound = () => {\r\n    this.audio.current.currentTime = 0;\r\n    this.audio.current.play();\r\n    setTimeout(100);\r\n\r\n    const id = this.audio.current.id;\r\n\r\n    const parent = this.audio.current.parentNode;\r\n    const display = parent.parentNode;\r\n    display.querySelector('h2').innerText = id;\r\n  }\r\n\r\n  render() {\r\n    const { text, audio } = this.props;\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n      const id = e.key.toUpperCase();\r\n      const audio = document.getElementById(id);\r\n      if (audio) {\r\n        const parent = audio.parentNode;\r\n        parent.classList.add('active');\r\n\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n\r\n        audio.addEventListener('ended', () => {\r\n          parent.classList.remove('active');\r\n        })\r\n\r\n        const display = parent.parentNode;\r\n        display.querySelector('h2').innerText = id;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div id={`drum-${text}`} className='drum-pad' onClick={this.playSound} >\r\n        <audio ref={this.audio} id={text} src={audio} className='clip' />\r\n        { text}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","import React, { Component } from 'react';\r\n\r\nimport { SoundContext } from '../contexts/SoundContext';\r\nimport Box from './Box';\r\n\r\nclass DrumPad extends Component {\r\n  static contextType = SoundContext;\r\n\r\n  render() {\r\n    const [beats] = this.context;\r\n\r\n    return (\r\n      <div id='drum-machine' className='drum-container'>\r\n        <div id='display' className='display'><h2>beat</h2></div>\r\n        {beats.map((beat, idx) => (\r\n          <Box\r\n            text={beat.keyTrigger}\r\n            key={idx}\r\n            audio={beat.mp3}\r\n          />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from 'react';\nimport DrumPad from './components/DrumPad';\nimport SoundContextProvider from './contexts/SoundContext';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <SoundContextProvider>\n        <DrumPad />\n      </SoundContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}